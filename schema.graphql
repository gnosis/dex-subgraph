# See Types in: https://thegraph.com/docs/define-a-subgraph
#   - Bytes: Byte array, represented as a hexadecimal string. Commonly used for Ethereum hashes and addresses
#   - ID:	Stored as a string
#   - string: Scalar for string values
#   - boolean: Scalar for boolean values
#   - Int	The GraphQL spec defines Int to have size of 32 bytes
#   - BigInt	Arbitrarily large integers. Used for Ethereum's uint32, int64, uint64, ..., uint256 types. Note: Everything below uint32, such as int32, uint24 or int8 is represented as i32.
#   - BigDecimal	BigDecimal is used to represent arbitrary precision decimals

type Token @entity {
  "Registered token"
  id: ID! # tokenId
  address: Bytes!
  fromBatchId: BigInt!

  # token details (optional)
  symbol: String
  decimals: BigInt # Used BigInt instead of Int because it doesn't allow an optional u32
  name: String

  # Balances and Deposits
  # balances: [Balance!]! @derivedFrom(field: "token") // TODO: Pending mapping
  # deposits: [Deposit!]! @derivedFrom(field: "token") // TODO: Disabled for now, until we sort out how to relate it better

  # Audit Dates
  createEpoch: BigInt!

  # Transaction
  txHash: Bytes!
}

type Price @entity {
  "Price for a token and batchId"
  id: ID! # tokenId + batchId
  token: Token!
  batchId: BigInt!

  # Price and volume
  priceInOwlNumerator: BigInt!
  priceInOwlDenominator: BigInt!
  volume: BigInt!

  # Audit Dates
  createEpoch: BigInt!

  # Transaction
  txHash: Bytes!
}

type User @entity {
  "User of the protocol. Any ethereum account that deposited tokens or traded"
  id: ID! # address
  fromBatchId: BigInt!

  # Balances, deposits, orders
  orders: [Order!]! @derivedFrom(field: "owner")
  deposits: [Deposit!]! @derivedFrom(field: "user")
  withdrawRequests: [WithdrawRequest!]! @derivedFrom(field: "user")
  withdrawals: [Withdraw!]! @derivedFrom(field: "user")
  # balances: [Balance!]! @derivedFrom(field: "user") # TODO: Pending implementation

  # Audit Dates
  createEpoch: BigInt!

  # Transaction
  txHash: Bytes!
}

# TODO: Pending implementation
#
# type Balance @entity {
#   "User's balance for a token"
#   id: ID! # user-token
#   user: User!
#   token: Token!
#   balance: BigInt! # TODO: Model also the Fluxs

#   # Audit Dates
#   createEpoch: BigInt!
#   updateEpoch: BigInt!
# }

type Deposit @entity {
  "Deposit of an user"
  id: ID! # user-token
  user: User!
  tokenAddress: Bytes!
  # token: Token # TODO: Review how can I add the token relationship here considering

  amount: BigInt!
  batchId: BigInt!

  # Audit Dates
  createEpoch: BigInt!

  # Transaction
  txHash: Bytes!
}

type WithdrawRequest @entity {
  "Withdraw request of an user"
  id: ID! # txHash + id
  user: User!
  tokenAddress: Bytes!
  # token: Token # TODO: Review how can I add the token relationship here considering

  amount: BigInt!
  withdrawableFromBatchId: BigInt!

  # Audit Dates
  createEpoch: BigInt!
  createBatchId: BigInt!

  # Transaction
  txHash: Bytes!
}

type Withdraw @entity {
  "Withdraw of an user"
  id: ID! # txHash + id
  user: User!
  tokenAddress: Bytes!
  # token: Token # TODO: Review how can I add the token relationship here considering

  amount: BigInt!

  # Audit Dates
  createEpoch: BigInt!
  createBatchId: BigInt!

  # Transaction
  txHash: Bytes!
}

type Order @entity {
  "Order submitted by an user. It has a validity (dates) so they can only be executed from/until some given batches. Partial executions of this trades must respect the limit price."
  id: ID! # ownerAddress + orderId
  owner: User! # address - TODO: User
  orderId: Int! # uint16
  # Validity
  fromBatchId: BigInt! # uint32
  fromEpoch: BigInt!
  untilBatchId: BigInt! # uint32
  untilEpoch: BigInt!

  # Tokens
  buyToken: Token!
  sellToken: Token!

  # Price
  priceNumerator: BigInt! # uint128
  priceDenominator: BigInt! # uint128
  # Traded amounts
  maxSellAmount: BigInt!
  minReceiveAmount: BigInt!

  soldVolume: BigInt!
  boughtVolume: BigInt!
  trades: [Trade!]! @derivedFrom(field: "order")

  # Audit Dates
  createEpoch: BigInt!
  cancelEpoch: BigInt
  deleteEpoch: BigInt

  # Transaction
  txHash: Bytes!
  txLogIndex: BigInt!
}

type Trade @entity {
  "Trade for a single user, as part of a ring trade. It's part of the solution submitted by a solver for a given batch"
  id: ID! # txHash + logIndex
  order: Order!

  # Trade details
  owner: User!
  sellVolume: BigInt!
  buyVolume: BigInt!
  tradeBatchId: BigInt!
  tradeEpoch: BigInt!

  # Tokens
  buyToken: Token!
  sellToken: Token!

  # Audit Dates
  #   Note that "createEpoch" is different from "tradeEpoch", since "tradeEpoch" is the end of the batch, and the
  #   "createEpoch" is the date where the transaction was mined
  createEpoch: BigInt!
  revertEpoch: BigInt

  # Transaction
  txHash: Bytes!
  txLogIndex: BigInt!
}

type Batch @entity {
  "Batch executed. Every batch will contain at least solution with the a set of trades that are executed in it"
  id: ID! # batchId
  # batch details
  startEpoch: BigInt!
  endEpoch: BigInt
  solution: Solution!
  solutions: [Solution!]! @derivedFrom(field: "batch")

  # Audit Dates
  firstSolutionEpoch: BigInt!
  lastRevertEpoch: BigInt

  # Transaction
  txHash: Bytes!
}

type Solution @entity {
  id: ID! # txHash + id
  batch: Batch!

  # Optional for 2 reasons:
  #   - Events are handled before calls, so the Trade event will be indexed before the submitSolution
  solver: User
  feeReward: BigInt
  objectiveValue: BigInt

  # Trades
  trades: [Trade!]!

  # Audit Dates
  createEpoch: BigInt!
  revertEpoch: BigInt

  # Transaction
  txHash: Bytes!
  txLogIndex: BigInt!
}

type FleetDeployed @entity {
  id: ID! # txHash + id
  owner: Bytes!
  fleet: [Bytes!]

  # Transaction
  txHash: Bytes!
}
